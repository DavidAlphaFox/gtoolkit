{
	"__schema" : "4.1",
	"__type" : "page",
	"children" : {
		"__type" : "snippets",
		"items" : [
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2023-03-15T07:38:47.357053+01:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2023-03-15T07:39:55.497701+01:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "qNxOVUyzDQCjiyJzAx2bYw=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "We now have a PetitParser class {{gtClass:name=SPLGrammar}} that recognizes [[SPL]] programs as part of our [[PetitParser SPL case study]]. We now extend the grammar rules with actions to build an AST that we can then use to implement an interpreter."
						}
					]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-03-15T07:38:06.038086+01:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-03-15T07:38:10.516696+01:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "WGTYUkyzDQCheuj4Ax2bYw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "#TL;DR"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2023-03-15T07:40:32.630014+01:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2023-03-15T07:43:08.86587+01:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "fDOVW0yzDQCoHoskAx2bYw=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "Although we could directly modify the {{gtClass:name=SPLGrammar}} productions to add actions, for a non-trivial grammar it can be a good idea to add actions instead in a subclass. This will (1) clearly separate the concerns of recognizing the grammar from building the AST, and (2) allow us later to add other subclasses that perform different actions, such as pretty-printing, or generating a different intermediate representation for SPL programs."
						},
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2023-03-15T07:43:09.190627+01:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2023-03-15T07:44:35.973007+01:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "eB/qZEyzDQCxvgxoAx2bYw=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "We accordingly define {{gtClass:name=SPLParser}} as a subclass, and we also introduce {{gtClass:name=SPLParserExamples}} as a subclass of {{gtClass:name=SPLGrammarExamples}}, so that we can reuse and extend the examples and add new kinds of assertions for the AST generation rules."
						},
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2023-03-15T07:45:03.814822+01:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2023-03-15T07:48:12.907597+01:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "240Fa0yzDQC2Q9iEAx2bYw=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "PetitParser actions are added to a parser (or any sub-parser) using the `==>` operation. The right-hand side is a one-argument block that transforms the result of the parser into another kind of object. Since we inherit all the productions from the superclass, pretty much all the methods of {{gtClass:name=SPLParser}}  look like this example: {{gtMethod:name=SPLParser>>#boolean|expanded}}"
						},
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2023-03-15T07:48:17.41742+01:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2023-03-15T07:50:33.202819+01:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "FEpJd0yzDQC+ujXOAx2bYw=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "We inherit the `boolean` production from the superclass, and adorn it  with an action that returns an {{gtClass:name=SPLBoolean}} AST node for the (Smalltalk) Boolean value `true` or `false`. (Note that the expression `node = 'true'` will evaluate to an actual Smalltalk Boolean value.)"
						},
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2023-03-15T07:50:36.202197+01:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2023-03-15T07:52:40.298331+01:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "MPuOf0yzDQCEX8H6Ax2bYw=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "Sometimes we must extract some information of interest from the argument to the action block. For example, for the print statement, we are only interested in the second part recognized by the parser: {{gtMethod:name=SPLParser>>#printStmt|expanded}}"
						},
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2023-03-15T07:52:51.120843+01:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2023-03-15T07:54:15.10239+01:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "MqyZh0yzDQCIydi2Ax2bYw=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "If you expand the inherited production (click on the grey triangle to the right of `super printStmt`), you will see that `node second` corresponds to the `expression` of the print statement. We can safely discard the `print` keyword and the semi-colon."
						},
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2023-03-15T07:54:16.401925+01:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2023-03-15T07:54:50.344361+01:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "9vaujEyzDQCOeFeyAx2bYw=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "Some productions require no action: {{gtMethod:name=SPLParser>>#statement|expanded}}"
						},
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2023-03-15T07:57:47.918262+01:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2023-03-15T07:58:30.30662+01:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "3bfjjkyzDQCPckVzAx2bYw=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "All the actions are pretty much the same. The only complicated one is for `if` statements, which have an option `else` part: {{gtMethod:name=SPLParser>>#ifStmt|expanded}}"
						}
					]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-03-15T07:39:55.855344+01:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-03-15T07:40:32.172506+01:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "cRBkWUyzDQCnSN9JAx2bYw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "#Adding PetitParser actions in a subclass"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-03-15T07:48:18.047849+01:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-03-15T07:58:47.598725+01:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "sOhSd0yzDQC+v0Z2Ax2bYw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "#The SPL AST hierarchy"
			}
		]
	},
	"createEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"createTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2023-03-15T07:38:06.011349+01:00"
		}
	},
	"editEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"editTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2023-03-15T07:38:06.011349+01:00"
		}
	},
	"pageType" : {
		"__type" : "namedPage",
		"title" : "Using PetitParser to build an AST"
	},
	"uid" : {
		"__type" : "uuid",
		"uuid" : "30fbd752-4cb3-0d00-a179-ce4c031d9b63"
	}
}