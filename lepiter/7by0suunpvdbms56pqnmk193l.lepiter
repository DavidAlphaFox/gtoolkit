{
	"__schema" : "4.1",
	"__type" : "page",
	"children" : {
		"__type" : "snippets",
		"items" : [
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-09-27T12:16:45.752156+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-09-27T12:24:07.57127+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "6CuKPliJDQCm6cN+CdHXew=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Responsive and non-blocking user interface is a key to a good user experience. It is therefore a responsibility of a UI developer to ensure that most if not all actions do not block the UI thread. That can be acomplished by asynchronously performing time consuming operations in a different worker thread and then refreshing or updating the UI once the data is available. While waiting for the background task to finish, the UI should inform a user that there is a *pending* operation and the UI is not yet in its final state."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-09-27T12:24:08.721627+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-09-27T12:25:18.275039+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "LKfvO1mJDQCvMnD1A8wzBQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "##Futures"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-09-27T12:31:28.016378+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-09-27T12:44:50.016561+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "VDExQFmJDQCvO1ohA8wzBQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "A future represents an asynchronous computation. Any object that implements {{gtClass:TAsyncFuture}} trait can be used as a future. For example, a {{gtClass:BlockClosure}} can be transformed into a future by sending {{gtMethod:BlockClosure>>#asFuture}} and later be composed as part a more complex future using future combinators api. One such future combinator is {{gtClass:AsyncMapFuture}}:"
			},
			{
				"__type" : "exampleSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-09-27T12:25:24.359884+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-09-27T12:25:24.359884+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "72p+QFmJDQCvPzAgA8wzBQ=="
				},
				"exampleSelector" : "mapFuture",
				"previewHeight" : 120,
				"previewShowSelector" : "gtCompositionFor:",
				"exampleBehaviorName" : "AsyncFutureExamples",
				"codeExpanded" : true,
				"previewExpanded" : true,
				"noCode" : false
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-09-27T12:34:51.313428+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-09-27T12:35:18.607694+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "klj2YVmJDQCwI+KzCp+oWQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "##Brick widgets from the Future"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-09-27T12:36:40.567184+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-09-27T12:39:59.880525+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "CVv2ZFmJDQCwMfVTCp+oWQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "While {{gtClass:TAsyncFuture}} represents a foundation brick of an asynchronous programming, `Brick` widgets are foundation of the user interface. To glue them together developers can use {{gtClass:BrFromFuture}} widget (read as `brick from the future`) to display values coming from asynchronous computations."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-09-27T17:48:04.114133+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-09-27T17:48:55.548414+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "X8Eywl2JDQCF5lCWCEitkQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "The following examples shows how to wrap a {{gtClass:BrLabel}} into an element that gets data from a future and assigns the text of a label depending on the state:"
			},
			{
				"__type" : "exampleSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-09-27T17:46:51.481517+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-09-27T17:46:51.481517+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "1okYvl2JDQCF5Ia+CEitkQ=="
				},
				"exampleSelector" : "fromFutureLabel",
				"previewHeight" : 70,
				"previewShowSelector" : "gtLiveFor:",
				"exampleBehaviorName" : "BrFromFutureExamples",
				"codeExpanded" : true,
				"previewExpanded" : true,
				"noCode" : false
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-09-27T17:49:25.855875+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-09-27T17:50:11.247896+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "aDIHx12JDQCF7OIdCEitkQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "{{gtClass:BrFromFuture}} allows developers to gracefully handle *pending* state and even *errors*:"
			},
			{
				"__type" : "exampleSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-09-27T17:49:07.344863+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2021-09-27T17:49:07.344863+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "A6Yxxl2JDQCF6rZpCEitkQ=="
				},
				"exampleSelector" : "fromFutureLabelWithError",
				"previewHeight" : 70,
				"previewShowSelector" : "gtLiveFor:",
				"exampleBehaviorName" : "BrFromFutureExamples",
				"codeExpanded" : true,
				"previewExpanded" : true,
				"noCode" : false
			}
		]
	},
	"createEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"createTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2021-09-27T11:13:16.564694+02:00"
		}
	},
	"editEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"editTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2021-09-27T12:15:42.974616+02:00"
		}
	},
	"pageType" : {
		"__type" : "namedPage",
		"title" : "Asynchronous widgets & futures"
	},
	"uid" : {
		"__type" : "uuid",
		"uuid" : "5180893e-5889-0d00-a6e8-632309d1d77b"
	}
}